# SPDX-FileCopyrightText: 2022 Felix Gruber <felgru@posteo.net>
#
# SPDX-License-Identifier: GPL-3.0-or-later

from collections.abc import Iterable
import os
from pathlib import Path
from typing import Protocol, Union


class AddFileTransaction(Protocol):
    def add_files(self, files: Iterable[Union[Path, str]]) -> None: ...


def write_include_files(ledger_root: Path, git: AddFileTransaction) -> None:
    ledger_name = 'journal.hledger'
    ledger_files: list[Path] = []
    directories: list[Path] = []
    filenames: list[str] = []
    for p in ledger_root.iterdir():
        if p.is_dir() and p.name.isnumeric():  # only include year directories.
            if recurse_include_files(p, git, ledger_files):
                directories.append(p)
        # Check name to prevent include file from including itself.
        elif p.suffix == '.hledger' and p.name != ledger_name:
            filenames.append(p.name)
    directories.sort()
    filenames.sort()
    ledger = ledger_root / ledger_name
    write_include_file(ledger, directories, filenames)
    ledger_files.append(ledger)
    git.add_files(ledger_files)


def recurse_include_files(cur_dir: Path,
                          git: AddFileTransaction,
                          ledger_files: list[Path]) -> bool:
    ledger_name = 'journal.hledger'
    directories: list[Path] = []
    filenames: list[str] = []
    for p in cur_dir.iterdir():
        if p.is_dir():
            if recurse_include_files(p, git, ledger_files):
                directories.append(p)
        # Check name to prevent include file from including itself.
        elif p.suffix == '.hledger' and p.name != ledger_name:
            filenames.append(p.name)
    directories.sort()
    filenames.sort()
    ledger = cur_dir / ledger_name
    if not directories and not filenames:
        if ledger.exists():
            ledger.unlink()
            # Make sure that we git add the removed ledger file in order
            # to remove it in the next Git commit.
            ledger_files.append(ledger)
        return False
    write_include_file(ledger, directories, filenames)
    ledger_files.append(ledger)
    return True


def write_include_file(ledger_path: Path,
                       directories: list[Path],
                       filenames: list[str],
                       ledger_name: str = 'journal.hledger',
                       ) -> None:
    with open(ledger_path, 'w') as f:
        print("; autogenerated file, do not edit\n", file=f)
        cur_dir = ledger_path.parent
        for d in directories:
            print(f'include {d.relative_to(cur_dir) / ledger_name}', file=f)
        for filename in filenames:
            print(f'include {filename}', file=f)
